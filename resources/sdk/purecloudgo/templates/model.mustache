package {{packageName}}
{{#models}}
import ({{#imports}}
	"{{import}}"{{/imports}}
	"github.com/leekchan/timeutil"
	"encoding/json"
	"strconv"
	"strings"
)
{{#model}}

// {{classname}}{{#description}} - {{{description}}}{{/description}}
type {{classname}} struct { {{#vars}}
	// {{name}}{{#description}} - {{{description}}}{{/description}}
	{{name}} *{{{datatype}}} `json:"{{baseName}},omitempty"`

{{/vars}}}

func (u *{{classname}}) MarshalJSON() ([]byte, error) {
	// Redundant initialization to avoid unused import errors for models with no Time values
	_  = timeutil.Timedelta{}
	type Alias {{classname}}

	{{#vars}}{{#isDateTime}}
	{{name}} := new(string)
	if u.{{name}} != nil {
		{{#vendorExtensions.x-local-date-time}}*{{name}} = timeutil.Strftime(u.{{name}}, "%Y-%m-%dT%H:%M:%S.%f"){{/vendorExtensions.x-local-date-time}}
		{{^vendorExtensions.x-local-date-time}}*{{name}} = timeutil.Strftime(u.{{name}}, "%Y-%m-%dT%H:%M:%S.%fZ"){{/vendorExtensions.x-local-date-time}}
	} else {
		{{name}} = nil
	}
	{{/isDateTime}}{{^isDateTime}}{{#isDate}}
	{{name}} := new(string)
	if u.{{name}} != nil {
		*{{name}} = timeutil.Strftime(u.{{name}}, "%Y-%m-%d")
	} else {
		{{name}} = nil
	}
	{{/isDate}}{{/isDateTime}}{{/vars}}

	return json.Marshal(&struct { {{#vars}}{{#isDateTime}}
		{{name}} *string `json:"{{baseName}},omitempty"`
		{{/isDateTime}}{{^isDateTime}}{{#isDate}}
		{{name}} *string `json:"{{baseName}},omitempty"`
		{{/isDate}}{{^isDate}}
		{{name}} *{{{datatype}}} `json:"{{baseName}},omitempty"`
		{{/isDate}}{{/isDateTime}}{{/vars}}*Alias
	}{ {{#vars}}{{#isDateTime}}
		{{name}}: {{name}},
		{{/isDateTime}}{{^isDateTime}}{{#isDate}}
		{{name}}: {{name}},
		{{/isDate}}{{^isDate}}
		{{name}}: u.{{name}},
		{{/isDate}}{{/isDateTime}}{{/vars}}Alias:    (*Alias)(u),
	})
}

// String returns a JSON representation of the model
func (o *{{classname}}) String() string {
	j, _ := json.Marshal(o)
	str, _ := strconv.Unquote(strings.Replace(strconv.Quote(string(j)), `\\u`, `\u`, -1))

	return str
}
{{/model}}{{/models}}