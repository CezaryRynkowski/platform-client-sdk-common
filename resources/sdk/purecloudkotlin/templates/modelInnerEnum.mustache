  private class {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}Deserializer : StdDeserializer<{{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}?>({{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}Deserializer::class.java) {
      @Throws(IOException::class)
      override fun deserialize(jsonParser: JsonParser, ctxt: DeserializationContext): {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}? {
          val node = jsonParser.codec.readTree<JsonNode>(jsonParser)
          return {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}.fromString(node.toString().replace("\"", ""))
      }
  }
  /**
   * {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{{description}}}{{/description}}
   */
   @JsonDeserialize(using = {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}Deserializer.class)
   enum class {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}(private val value: {{datatype}}) {
      {{#allowableValues}}{{#enumVars}}{{{name}}}({{{value}}}){{^-last}},
      {{/-last}}{{#-last}};{{/-last}}{{/enumVars}}{{/allowableValues}}

    companion object {
      @JsonCreator
      fun fromString(key: String?): {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}? {
        if (key == null) return null
        for (value in values()) {
          if (key.equals(value.toString(), ignoreCase = true)) {
            return value
          }
        }
        return values()[0]
      }
    }

    @JsonValue
    override fun toString(): String {
      return value.toString()
    }
  }