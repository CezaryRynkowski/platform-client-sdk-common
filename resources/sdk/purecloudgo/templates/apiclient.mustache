package {{packageName}}

import (
	"bytes"
	"fmt"
	"path/filepath"
	"reflect"
	"strings"

	"github.com/go-resty/resty"
)

var client = resty.New()

type APIClient struct {
	configuration *Configuration
}

func (c *APIClient) SelectHeaderContentType(contentTypes []string) string {
	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

func (c *APIClient) SelectHeaderAccept(accepts []string) string {
	if len(accepts) == 0 {
		return ""
	}
	if contains(accepts, "application/json") {
		return "application/json"
	}
	return strings.Join(accepts, ",")
}

func contains(source []string, containvalue string) bool {
	for _, a := range source {
		if strings.ToLower(a) == strings.ToLower(containvalue) {
			return true
		}
	}
	return false
}

func (c *APIClient) CallAPI(path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams map[string]string,
	formParams map[string]string,
	fileName string,
	fileBytes []byte) (*APIResponse, error) {

	// Set debug flag
	client.SetDebug(c.configuration.GetDebug())

	request := client.R()
	request.SetBody(postBody)

	// Add header parameter, if any
	if len(headerParams) > 0 {
		request.SetHeaders(headerParams)
	}

	// Add query parameter, if any
	if len(queryParams) > 0 {
		request.SetQueryParams(queryParams)
	}

	// Add form parameter, if any
	if len(formParams) > 0 {
		request.SetFormData(formParams)
	}

	if len(fileBytes) > 0 && fileName != "" {
		_, fileNm := filepath.Split(fileName)
		request.SetFileReader("file", fileNm, bytes.NewReader(fileBytes))
	}

	var response *resty.Response
	var err error

	c.configuration.Debugf(">>> %s %s\n", strings.ToUpper(method), path)
	switch strings.ToUpper(method) {
	case "GET":
		response, err = request.Get(path)
	case "POST":
		response, err = request.Post(path)
	case "PUT":
		response, err = request.Put(path)
	case "PATCH":
		response, err = request.Patch(path)
	case "DELETE":
		response, err = request.Delete(path)
	default:
		return nil, fmt.Errorf("invalid method %v", method)
	}

	if err != nil {
		return nil, err
	}
	c.configuration.Debugf("<<< %v\n", response.Status())

	return NewAPIResponse(response)
}

func (c *APIClient) ParameterToString(obj interface{}, collectionFormat string) string {
	if reflect.TypeOf(obj).String() == "[]string" {
		switch collectionFormat {
		case "pipes":
			return strings.Join(obj.([]string), "|")
		case "ssv":
			return strings.Join(obj.([]string), " ")
		case "tsv":
			return strings.Join(obj.([]string), "\t")
		case "csv":
			return strings.Join(obj.([]string), ",")
		}
	}

	return obj.(string)
}

func Int32(v int) (*int32) {
	p := int32(v)
	return &p
}

func String(v string) (*string) {
	return &v
}

func Bool(v bool) (*bool) {
	return &v
}