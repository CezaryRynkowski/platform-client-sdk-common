using NUnit.Framework;
using System;
using {{packageName}}.Api;
using {{packageName}}.Client;
using {{packageName}}.Extensions;
using {{packageName}}.Extensions.Notifications;
using {{packageName}}.Model;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using RestSharp;
using System.Linq;
using Parameter = RestSharp.Parameter;
using System.Net;
using Moq;

namespace {{packageName}}.Tests
{

    [TestFixture]
    public class ApiClientTests
    {
       // string clientId = Environment.GetEnvironmentVariable("PURECLOUD_CLIENT_ID");
       // string clientSecret = Environment.GetEnvironmentVariable("PURECLOUD_CLIENT_SECRET");
      //  string environment = Environment.GetEnvironmentVariable("PURECLOUD_ENVIRONMENT");

        string clientId = "4c2bb5c6-c94d-4eec-bff7-d9449ba7b4ff";
       string clientSecret = "ONogM5GqbML6t-YhDQD8VcmNylDncXiCP9NqY3sX4ZY";


    /*    [Test]
        public void myTestMethod1()
        {
            Console.WriteLine("nAuthenticating...");

            AuthenticateApiClient();

            Console.WriteLine("Authentication Success.");

            var usersApi = new UsersApi();

            Console.WriteLine("Calling Users API to DCA");


            var mockRestClient = new Mock<IRestClient>();
            var mockRestResponse = new Mock<IRestResponse>();

            IRestResponse response = new RestResponse();
            response.StatusCode = (HttpStatusCode)429;

            response.Headers.Add(new Parameter
            {
                Name = "Retry-After",
                Value = 3,
                Type = ParameterType.HttpHeader
            });

            mockRestClient
               .Setup(x => x.Execute(It.IsAny<IRestRequest>()))
               .Returns(response);
            var me = usersApi.GetUsers();
            Console.WriteLine($"Hello, {me}");


           // var result = usersApi.GetUsersAsync();
           // Console.WriteLine(result.Result);

            Console.WriteLine("Got Users from DCA");

        } */


        public void AuthenticateApiClient()
        {
          //  PureCloudRegionHosts? region = getRegion(environment);
          //  if (region == null)
          //  { //Returned in the case of default value
              //  Configuration.Default.ApiClient.setBasePath("https://api." + environment);
                {{packageName}}.Client.Configuration.Default.ApiClient.setBasePath("https://api.inindca.com");
         //   }
         //   else
         //   {
         //       PureCloudRegionHosts regionval = region.GetValueOrDefault();
         //       {{packageName}}.Client.Configuration.Default.ApiClient.setBasePath(regionval);
         //   }

            var accessTokenInfo = {{packageName}}.Client.Configuration.Default.ApiClient.PostToken(clientId, clientSecret);
            {{packageName}}.Client.Configuration.Default.AccessToken = accessTokenInfo.AccessToken;
        }

        public Nullable<PureCloudRegionHosts> getRegion(String str = "http://api.mypurecloud.com")
        {
            switch (str)
            {
                case "mypurecloud.com":
                    return PureCloudRegionHosts.us_east_1;
                case "mypurecloud.ie":
                    return PureCloudRegionHosts.eu_west_1;
                case "mypurecloud.de":
                    return PureCloudRegionHosts.eu_central_1;
                case "mypurecloud.jp":
                    return PureCloudRegionHosts.ap_northeast_1;
                case "mypurecloud.com.au":
                    return PureCloudRegionHosts.ap_southeast_1;
                case "usw2.pure.cloud":
                    return PureCloudRegionHosts.us_west_2;
                case "cac1.pure.cloud":
                    return PureCloudRegionHosts.ca_central_1;
                case "apne2.pure.cloud":
                    return PureCloudRegionHosts.ap_northeast_2;
                case "euw2.pure.cloud":
                    return PureCloudRegionHosts.eu_west_2;
                default:
                    Console.WriteLine("Value does not exist in enum using default val");
                    return null;
            }
        }
    }
}