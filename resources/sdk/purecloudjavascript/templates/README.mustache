---
title: JavaScript SDK
---
A JavaScript library to interface with the PureCloud Platform API

[![GitHub release](https://img.shields.io/github/release/mypurecloud/platform-client-sdk-javascript.svg)]()
![Bower version](https://img.shields.io/bower/v/{{projectName}}.svg)
[![npm](https://img.shields.io/npm/v/{{projectName}}.svg)](https://www.npmjs.com/package/{{projectName}})


# Platform API Javascript Client

Install with [Bower](http://bower.io):

~~~ sh
bower install {{projectName}}
~~~

Install with [NPM](https://www.npmjs.com/package/{{projectName}}):

~~~ sh
npm install {{projectName}}
~~~

Reference from the CDN:

~~~ html
<!-- Replace `{{projectVersion}}` with the version you want to use. -->
<script src="https://sdk-cdn.mypurecloud.com/javascript/{{projectVersion}}/{{projectName}}.min.js"></script>
~~~

View the documentation on the [PureCloud Developer Center](https://developer.mypurecloud.com/api/rest/client-libraries/javascript/).
View the source code on [Github](https://github.com/MyPureCloud/{{projectName}}).


# Usage

## Client-side usage

Reference the SDK in your HTML document. For convenience, all modules are bundled together.

~~~ html
<!-- Include the full library -->
<script type="text/javascript" src="{{projectName}}.min.js"></script>
~~~


## NodeJS usage

Require the SDK in your node app. All modules are obtained from the `{{projectName}}` package.

~~~ javascript
var {{moduleName}} = require('{{projectName}}');
~~~


## Authentication

After authentication has completed, the access token is stored on the `ApiClient` instance and the access token will be sent with all API requests.

**Node.js** [Client Credentials grant](https://developer.mypurecloud.com/api/rest/authorization/use-client-credentials.html)

The Client Credentials grant only works when used in node.js. This is restricted intentionally because it is impossible for client credentials to be handled securely in a browser application.

~~~ javascript
var {{moduleName}} = require('{{projectName}}');
var client = {{moduleName}}.ApiClient.instance;
client.loginClientCredentialsGrant(clientId, clientSecret)
  .then(function() {
    // Do authenticated things
  })
  .catch(function(error) {
    console.log(error);
  });
~~~

**Web** [Implicit grant](https://developer.mypurecloud.com/api/rest/authorization/use-implicit-grant.html)

The Implicit grant only works when used in a browser. This is because a node.js application does not have a browser interface that can display the PureCloud login window.

~~~ javascript
var {{moduleName}} = require('{{projectName}}');
var client = {{moduleName}}.ApiClient.instance;
client.loginImplicitGrant(clientId, redirectUri)
  .then(function() {
    // Do authenticated things
  })
  .catch(function(error) {
    console.log(error);
  });
~~~

**Any platform** Provide an existing auth token

~~~ javascript
var {{moduleName}} = require('{{projectName}}');
var client = {{moduleName}}.ApiClient.instance;
client.setAccessToken(yourAccessToken);
// Do authenticated things; no login function needed
~~~


## Environments

If connecting to a PureCloud environment other than mypurecloud.com (e.g. mypurecloud.ie), set the environment on the `ApiClient` instance.

~~~ js
var client = {{moduleName}}.ApiClient.instance;
client.setEnvironment('mypurecloud.ie');
~~~


## Local Storage

To persist a token across web pages when navigating between them, set the `storageKey` in `PureCloudSession`.
`storageKey` will be used to store the token in LocalStorage if supported so make it unique if multiple sessions may exist in the same page.

~~~ js
var session = purecloud.platform.PureCloudSession({
  // ... your other settings
  storageKey: 'myAuthToken'
});
~~~


## Making Requests

All API requests return a Promise which resolves to the response body, otherwise it rejects with an error. After authenticating using one of the methods defined above, the following code will make an authenticated request:

**Node.js**

~~~ js
//TODO: include example of getting permissions
~~~

**Web**

~~~ js
// Create API instance
var usersApi = new {{moduleName}}.UsersApi();

// Authenticate
client.loginImplicitGrant(clientId, redirectUri)
  .then(function() {
    // Make request to GET /api/v2/users/me?expand=presence
    return usersApi.getUsersMe({ 'expand': ["presence"] });
  })
  .then(function(userMe) {
    // Handle successful result
    console.log(`Hello, ${userMe.name}!`);
  })
  .catch(function(error) {
    // Handle failure result
    console.error(error);
  });
~~~


### Error Responses

Error responses will contain an object with the HTTP status code, response headers, and the body of the error response.  e.g.

~~~ js
{
  "statusCode": 400,
  "headers": {
    "date": "Fri, 24 Feb 2017 16:36:21 GMT",
    "content-type": "application/json",
    "content-length": "135",
    "connection": "close",
    "inin-correlation-id": "391a2855-53ae-4f2b-bc9d-728ef989fd08",
    "inin-ratelimit-count": "1",
    "inin-ratelimit-allowed": "300",
    "inin-ratelimit-reset": "60",
    "cache-control": "no-cache, no-store, must-revalidate",
    "pragma": "no-cache",
    "expires": "0"
  },
  "body": {
    "status": 400,
    "code": "invalid.value",
    "message": "Value [] is not valid for field type [QueryFilterType]. Allowable values are: and, or"
  }
}
~~~


## Debug Logging

There are hooks to trace requests and responses.  To enable tracing, override the .debugLog method on the session object.

~~~ js
pureCloudSession.debugLog = console.log;
~~~


## Proxy Support

If behind a corporate proxy, provide an ```options.proxy``` property when creating a session:

~~~ js
var session = purecloud.PureCloudSession({proxy: 'http://my-corporate-proxy:1080'})
~~~
