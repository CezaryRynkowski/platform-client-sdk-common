package {{packageName}}

import (
	"encoding/json"
	"fmt"

	"github.com/go-resty/resty"
)

// APIResponse is a friendly interface for a response from the API
type APIResponse struct {
	Response      *resty.Response     `json:"-"`
	RawBody       string              `json:"rawBody,omitempty"`
	IsSuccess     bool                `json:"isSuccess,omitempty"`
	StatusCode    int                 `json:"statusCode,omitempty"`
	Error         *APIError           `json:"error,omitempty"`
	ErrorMessage  string              `json:"errorMessage,omitempty"`
	CorrelationID string              `json:"correlationId,omitempty"`
	Headers       map[string][]string `json:"headers,omitempty"`
}

// String returns the JSON serialized object
func (r *APIResponse) String() string {
	s, _ := json.Marshal(r)
	return string(s)
}

// SetError returns the JSON serialized object
func (r *APIResponse) SetError(err *APIError) {
	if err == nil {
		return
	}
	r.Error = err
	r.ErrorMessage = fmt.Sprintf("API Error: %v - %v (%v)", r.StatusCode, err.Message, r.CorrelationID)
}

// APIError is the standard error body from the API
type APIError struct {
	Status            int                    `json:"status,omitempty"`
	Message           string                 `json:"message,omitempty"`
	MessageWithParams map[string]interface{} `json:"messageWithParams,omitempty"`
	Code              string                 `json:"code,omitempty"`
	ContextID         string                 `json:"contextId,omitempty"`
	Details           []string               `json:"details,omitempty"`
}

// String returns the JSON serialized object
func (r *APIError) String() string {
	s, _ := json.Marshal(r)
	return string(s)
}

// NewAPIResponse creates an APIResponse from a Resty Response
func NewAPIResponse(r *resty.Response) (*APIResponse, error) {
	var apiError *APIError
	if !r.IsSuccess() {
		err := json.Unmarshal([]byte(r.String()), &apiError)
		if err != nil {
			return nil, err
		}
	}
	response := &APIResponse{Response: r, RawBody: r.String(), IsSuccess: r.IsSuccess() == true, StatusCode: r.StatusCode(), Headers: r.Header()}
	if header, exists := r.Header()["Inin-Correlation-Id"]; exists {
		response.CorrelationID = header[0]
	}
	response.SetError(apiError)
	return response, nil
}
