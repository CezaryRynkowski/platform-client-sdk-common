package {{invokerPackage}};

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.FileReader;
import java.io.FileInputStream;
import java.nio.charset.StandardCharsets;
import java.io.FileNotFoundException;
import org.ini4j.Ini;
import java.lang.Throwable;
import java.security.MessageDigest;
import java.lang.Thread;
import java.util.Map;

{{>generatedAnnotation}}
public class Configuration {
  private static ApiClient defaultApiClient = null;
  private static String configFileHash = "";
  private static String configFilePath = null;
  private static Boolean autoReloadConfig = false;
  private static Logger logger = null;

  /**
   * Get the default API client, which would be used when creating API
   * instances without providing an API client.
   */
  public static ApiClient getDefaultApiClient() {
    if (defaultApiClient == null)
      defaultApiClient = new ApiClient();
    return defaultApiClient;
   }

  /**
   * Set the default API client, which would be used when creating API
   * instances without providing an API client.
   */
  public static void setDefaultApiClient(ApiClient apiClient) {
    defaultApiClient = apiClient;
    autoReloadConfig = defaultApiClient.getAutoReloadConfig();
    logger = defaultApiClient.getLogger();
    configFilePath = defaultApiClient.getConfigFilePath();
    ApiClient.LoggingConfiguration loggingConfiguration = defaultApiClient.getLoggingConfiguration();
    Configuration configuration = new Configuration();
    configuration.applyConfigFromFile();
    if (autoReloadConfig) {
      File parentFolder = new File(configFilePath).getParentFile();
      while (parentFolder != null && !parentFolder.exists()) {
        File temp = parentFolder.getParentFile();
        if (temp != null) {
          parentDirectory = temp;
        } else {
          break;
        }
      }
      if (parentFolder != null) {
        new FileWatcher(parentFolder).addListener(new FileAdapter() {
          onModified(FileEvent event) {
            applyConfigFromFile();
          }
          onCreated(FileEvent event) {
            applyConfigFromFile();
          }
          onDeleted(FileEvent event) {
            defaultApiClient.applyLoggingConfiguration();
          }
        }).watch();
      }
    }
  }

  public void applyConfigFromFile() {
    ConfigurationParser parser = new ConfigurationParser(configFilePath);
    if (!parser.read()) {
      return;
    }
    // Logging
    String logLevel = parser.getString("logging", "log_level");
    if (logLevel != null && !logLevel.isEmpty()) {
        logger.setLevel(logger.logLevelFromString(logLevel));
    }
    String logFormat = parser.getString("logging", "log_format");
    if (logFormat != null && !logFormat.isEmpty()) {
        logger.setFormat(logger.logFormatFromString(logFormat));
    }
    String logToConsole = parser.getString("logging", "log_to_console");
    if (logToConsole != null && !logToConsole.isEmpty()) {
        logger.setLogToConsole(parser.getBool("logging", "log_to_console"));
    }
    String logFilePath = parser.getString("logging", "log_file_path");
    if (logFilePath != null && !logFilePath.isEmpty()) {
        logger.setLogFilePath(logFilePath);
    }
    String logRequestBody = parser.getString("logging", "log_request_body");
    if (logRequestBody != null && !logRequestBody.isEmpty()) {
        logger.setLogRequestBody(parser.getBool("logging", "log_request_body"));
    }
    String logResponseBody = parser.getString("logging", "log_response_body");
    if (logResponseBody != null && !logResponseBody.isEmpty()) {
        logger.setLogResponseBody(parser.getBool("logging", "log_response_body"));
    }
    // General
    String host = parser.getString("general", "host");
    if (host != null && !host.isEmpty()) {
        defaultApiClient.setBasePath(host);
    }
    String liveReloadConfig = parser.getString("general", "live_reload_config");
    if (liveReloadConfig != null && !liveReloadConfig.isEmpty()) {
        defaultApiClient.setAutoReloadConfig(parser.getBool("general", "live_reload_config"));
    }
    // Re-authentication
    String refreshAccessToken = parser.getString("reauthentication", "refresh_access_token");
    if (refreshAccessToken != null && !refreshAccessToken.isEmpty()) {
        defaultApiClient.setShouldRefreshAccessToken(parser.getBool("reauthentication", "refresh_access_token"));
    }
    String refreshTokenWaitTime = parser.getString("reauthentication", "refresh_token_wait_max");
    if (refreshTokenWaitTime != null && !refreshTokenWaitTime.isEmpty()) {
        defaultApiClient.setRefreshTokenWaitTime(parser.getInt("reauthentication", "refresh_token_wait_max"));
    }
    // Retry
    String maxRetryTimeSec = parser.getString("retry", "retry_wait_max");
    if (maxRetryTimeSec != null && !maxRetryTimeSec.isEmpty()) {
        ApiClient.RetryConfiguration retryConfiguration = defaultApiClient.getRetryConfiguration();
        retryConfiguration.setMaxRetryTimeSec(parser.getInt("retry", "retry_wait_max"));
        defaultApiClient.setRetryConfiguration(retryConfiguration);
    }
    String retryMax = parser.getString("retry", "retry_max");
    if (retryMax != null && !retryMax.isEmpty()) {
      ApiClient.RetryConfiguration retryConfiguration = defaultApiClient.getRetryConfiguration();
      retryConfiguration.setRetryMax(parser.getInt("retry", "retry_max"));
      defaultApiClient.setRetryConfiguration(retryConfiguration);
    }
  }
  
  private class ConfigurationParser {
    private String filePath;
    private FileFormat fileFormat;
    private Ini iniData;
    private Map<String, Object> jsonData;

    public ConfigurationParser(String filePath) {
      this.filePath = filePath;
      this.fileFormat = FileFormat.Invalid;
    }

    public boolean read() {
      try {
        File configFile = new File(filePath);
        Ini ini = new Ini(new FileReader(configFile));
        this.iniData = ini;
        this.fileFormat = FileFormat.INI;
      } catch (FileNotFoundException e) {
        return false;
      } catch (Exception e) {
        try {
          ObjectMapper objectMapper = new ObjectMapper();
          File configFile = new File(filePath);
          Map<String, Object> jsonMap = objectMapper.readValue(configFile, Map.class);
          this.jsonData = jsonMap;
          this.fileFormat = FileFormat.JSON;
        } catch (Exception ex) {
          return false;
        }
      }
      return true;
    }

    public String getString(String section, String key) {
      switch (fileFormat) {
        case INI:
          return getIniString(section, key);
        case JSON:
          return getJsonString(section, key);
        default: 
          return "";
      }
    }

    public boolean getBool(String section, String key) {
      switch (fileFormat) {
        case INI:
          return getIniBool(section, key);
        case JSON:
          return getJsonBool(section, key);
        default: 
          return false;
      }
    }

    public int getInt(String section, String key) {
      switch (fileFormat) {
        case INI:
          return getIniInt(section, key);
        case JSON:
          return getJsonInt(section, key);
        default: 
          return 0;
      }
    }

    public String getJsonString(String section, String key) {
      try {
        Map<String, Object> sectionData = (Map<String, Object>)jsonData.get(section);
        return sectionData.get(key).toString().trim();
      } catch (Exception e) {
        return "";
      }
    }

    public boolean getJsonBool(String section, String key) {
      try {
        Map<String, Object> sectionData = (Map<String, Object>)jsonData.get(section);
        return Boolean.parseBoolean(sectionData.get(key).toString().trim());
      } catch (Exception e) {
        return false;
      }
    }

    public int getJsonInt(String section, String key) {
      try {
        Map<String, Object> sectionData = (Map<String, Object>)jsonData.get(section);
        return Integer.parseInt(sectionData.get(key).toString().trim());
      } catch (Exception e) {
        return -1;
      }
    }

    public String getIniString(String section, String key) {
      try {
        Ini.Section sectionData = iniData.get(section);
        return sectionData.get(key).trim();
      } catch (Exception e) {
        return "";
      }
    }

    public boolean getIniBool(String section, String key) {
      try {
        Ini.Section sectionData = iniData.get(section);
        return Boolean.parseBoolean(sectionData.get(key).trim());
      } catch (Exception e) {
        return false;
      }
    }

    public int getIniInt(String section, String key) {
      try {
        Ini.Section sectionData = iniData.get(section);
        return Integer.parseInt(sectionData.get(key).trim());
      } catch (Exception e) {
        return -1;
      }
    }

  }

  private enum FileFormat {
    INI,
    Invalid,
    JSON
  }
}